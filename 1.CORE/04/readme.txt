
1.分支结构：
	1.switch case结构：根据不同的条件执行不同的代码，用switch中的表达式的值和case中的值作“全等”比较；*******
	  语法：
	  switch（表达式）{
		case 值1：
			语句1；
			break；
		case 值2：
			语句2；
			break；
		case 值3：
			语句3；
			break；
		default：
			语句n；
	  }
	  break：停止当前结构的执行，并跳出当前结构；不影响程序继续向后运行。单独用；********** 不是每个case都要加break； (demo2)

	  switch  VS  else if
	  switch:条件全等比较时，首选switch case；
	  else if：除全等比较外，希望灵活定义条件时；

2.循环：
	让程序反复执行一段代码，只有达到临界条件时，停止循环；
	三要素：
	1.循环条件：继续循环的条件；------不满足条件跳出循环继续向下执行；
	2.循环变量：再循环条件中“用作比较”的变量；
	3.循环体：反复执行的代码段；

	三种循环结构：
	1.while循环： (demo3)
	  语法：
		var 循环变量=初始值；
		while（循环条件）{
			循环体；
			迭代变化循环变量；
		}

	  在任意min-max之间取随机整数的公式：**********************
	  parseInt(Math.random()*(max-min+1)+min)
		  0<=r<1

	  退出循环的方式：2种
	  1.自然退出：不满足条件循环的，自动退出；
	  2.手动退出：在循环体中用break强行退出；

	2.do while循环： (demo4)
	  语法：
		var 循环变量=初始值；
		do{
			循环体；
			迭代变化循环变量；
		}while（循环条件）;***** ;不能少 ********

	while  VS  do while
	当第一次条件满足时：while和do while完全一样；
	当第一次条件不满足时，while一次都不执行，do while至少执行一次；
	哪怕第一次条件不满足时，都需要执行一次时，就用do while代替while；

        *****js 里没有块级作用域******
	分支或循环中的变量，出了结构，照样用。


	3.for循环 (demo5)
	  语法：
		for（var 循环变量=初始值;循环条件;迭代变化循环变量;）{
			循环体；
		}

	for  VS  while
	for:只要循环变量的变化规律固定；
	product:积；

	continue:结束本轮循环，执行下一次循环；可以用否定条件（!=）替代；













